package org.epic.perleditor.editors.util;

import java.io.File;
import java.util.ArrayList;
import java.util.List;

import org.eclipse.core.runtime.*;
import org.epic.core.util.ScriptExecutor;
import org.epic.perleditor.PerlEditorPlugin;
import org.epic.perleditor.preferences.CodeAssistPreferences;

/**
 * Generates content assist proposals (e.g. autocompletions) using an external (user-defined) Perl helper script.
 * 
 * The helper script is supposed to run fast (as it blocks the UI thread). It receives parameters
 * of {@link #getProposals()} as its command-line arguments and the entire text of the edited document
 * as stdin. It is supposed to output on stdout a list of proposals (possibly none) separated by
 * the <pre><|proposal|></pre> delimiter, where each proposal is formatted as described in return
 * value of the {@link #getProposals()} method.
 * 
 * @see #getProposals
 */
public class ExternalAutoComplete extends ScriptExecutor
{
    private final File fExternalAssistantPath;  
    
    //~ Static fields/initializers

    public static final String PROPOSAL_DELIMITER = "\\<\\|proposal\\|\\>"; // it's a regex
    public static final String DISPLAY_STRING_DELIMITER = "<|display|>"; // it's a plain string
    public static final String REPLACE_STRING_DELIMITER = "<|replace|>";
    
    //~ Constructors

    protected ExternalAutoComplete(ILog log, String externalAssistantPath)
    {
        super(log);
        
        fExternalAssistantPath = new File(externalAssistantPath);
    }

    //~ Methods
    
    protected String getCharsetName()
    {
        return "UTF-8";
    }

    /**
     * Returns completion proposals generated by an external autocomplete helper script.
     *
     * @param documentText      text of the entire edited document
     * @param documentOffset    offset within the text at which the proposal is requested
     * @param selectionLength   length of explicitly selected text before documentOffset (0 = no selection)
     * @param documentPath      workspace-absolute path to the document (or null if not available) 
     *
     * @return array with proposals formatted as
     *         "replacementOffset,replacementLength,newCursorPosition,replacementString", with
     *         replacementOffset = where to insert the proposal in the document (typically = documentOffset),
     *         replacementLength = how many characters to remove at this offset (typically 0, i.e. just insert),
     *         newCursorPosition = where to place caret after the insertion, relative to replacementOffset
     *                             (typically = replacementString.length()),
     *         replacementString = what to insert at replacementOffset;
     *              extension: if this string begins with the special token <pre>&lt;|display|&gt</pre>,
     *              then the following text up until the special token <pre>&lt;|replace|&gt</pre>
     *              will be used as the display label in the pop-up and the remaining string as true replacement
     */
    public static String[] getProposals(
        String documentText, int documentOffset, int selectionLength, IPath documentPath)
    {
        ILog log = PerlEditorPlugin.getDefault().getLog();

        try
        {
            String assistantPath = PerlEditorPlugin.getDefault().getPreferenceStore().getString(
                CodeAssistPreferences.EXTERNAL_ASSISTANT_PATH);            
            String result = new ExternalAutoComplete(log, assistantPath).run(
                documentText, buildArgs(documentPath, documentOffset, selectionLength)).stdout;
            return result.split(PROPOSAL_DELIMITER);
        }
        catch (CoreException e)
        {
            log.log(e.getStatus());
            return new String[] {};
        }
    }

    protected String getExecutable()
    {
        return fExternalAssistantPath.getName();
    }

    protected String getScriptDir()
    {
        return fExternalAssistantPath.getParentFile().getAbsolutePath();
    }
    
    protected File getWorkingDir() throws CoreException
    {
        return fExternalAssistantPath.getParentFile();
    }

    private static List<String> buildArgs(IPath documentPath, int documentOffset, int selectionLength)
    {
        ArrayList<String> cmdArgs = new ArrayList<String>(3);
        cmdArgs.add(documentPath != null ? documentPath.toString() : "");
        cmdArgs.add(String.valueOf(documentOffset));
        cmdArgs.add(String.valueOf(selectionLength));

        return cmdArgs;
    }

}
